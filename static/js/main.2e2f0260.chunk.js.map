{"version":3,"sources":["components/Notification/Notification.module.css","components/Statistics/Statistics.module.css","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","components/Section/Section.jsx","App.js","reportWebVitals.js","index.js","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css"],"names":["module","exports","Statistics","good","neutral","bad","total","positivePercentage","className","styles","statistics","item","prototype","PropTypes","number","isRequired","FeedbackOptions","options","onLeaveFeedback","button","map","typr","value","onClick","listButton","arrayOf","string","func","Notification","message","Section","title","children","section","node","App","state","buttonsOption","onClickButton","e","currentBtnValue","currentTarget","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e2f0260.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__2MjQJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Statistics_item__14DFT\",\"statistics\":\"Statistics_statistics__GTGUi\"};","import styles from \"./Statistics.module.css\";\r\nimport PropTypes from \"prop-types\"\r\n\r\n  \r\nfunction Statistics({ good, neutral, bad, total, positivePercentage })\r\n{\r\n    return (\r\n        <ul className={styles.statistics }>\r\n            <li className={styles.item}>\r\n            <p>Good: {good}</p>\r\n        </li>\r\n        <li className={styles.item}>\r\n            <p>Neutral: {neutral}</p>\r\n        </li >\r\n        <li className={styles.item}>\r\n            <p>Bad: {bad}</p>\r\n        </li>\r\n        <li className={styles.item}>\r\n            <p>Total: {total}</p>\r\n        </li>\r\n        <li className={styles.item}>\r\n            <p>Positive feedback: {positivePercentage} %</p>\r\n        </li>\r\n    </ul>\r\n    )\r\n}\r\n\r\n\r\nStatistics.prototype = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired\r\n}\r\nexport default Statistics;","import styles from \"./FeedbackOptions.module.css\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  const button = options.map(button => (\r\n    <li  key={button}>\r\n      <button className={styles.button } typr=\"button\" value={button} onClick={onLeaveFeedback}  >\r\n        {button}\r\n      </button>\r\n    </li>\r\n  ))\r\n  return (\r\n    <ul className= {styles.listButton}>\r\n            {button}\r\n          </ul> \r\n\r\n    )\r\n}\r\n\r\nFeedbackOptions.prototype = {\r\n    options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired\r\n}\r\n\r\nexport default FeedbackOptions;","import styles from \"./Notification.module.css\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nfunction Notification({message}) {\r\n    return (\r\n        <>\r\n            <p className={styles.message }>{message}</p> \r\n        </>\r\n) };\r\n\r\nNotification.prototype = { \r\n    message: PropTypes.string.isRequired   \r\n}\r\nexport default Notification;\r\n\r\n\r\n","import styles from \"./Section.module.css\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nfunction Section({title, children }) {\r\n    return (\r\n        <div className={styles.section}>\r\n            <h2 className={ styles.title}>{title}</h2>\r\n            {children}\r\n        </div>\r\n) };\r\n\r\nSection.prototype = { \r\n    title: PropTypes.string.isRequired,\r\n    children:PropTypes.node.isRequired   \r\n}\r\nexport default Section;","import React, { Component } from 'react';\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Notification from './components/Notification';\nimport Section from './components/Section';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  buttonsOption = ['good', 'neutral', 'bad'];\n\n  onClickButton = e => {\n    const currentBtnValue = e.currentTarget.value;\n    this.setState(state => ({\n      ...state,\n      [currentBtnValue]: state[currentBtnValue] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  };\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={this.buttonsOption}\n            onLeaveFeedback={this.onClickButton}\n          ></FeedbackOptions>\n        </Section>\n        <Section title=\"Statistic\">\n          {this.countTotalFeedback() ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            ></Statistics>\n          ) : (\n            <Notification message=\"There is no feedback\"></Notification>\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listButton\":\"FeedbackOptions_listButton__3YHhC\",\"button\":\"FeedbackOptions_button__3Hynz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__3qvSV\",\"title\":\"Section_title__3Y7qi\"};"],"sourceRoot":""}